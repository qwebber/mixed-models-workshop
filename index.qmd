---
title: "Mixed models workshop - University of Guelph R Users group"
output: html_document
date: '2023-03-17'
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

```

## What are mixed models and why should we use them?

**Mixed effects models** are an extension of linear models that include a combination of fixed and random effects (Bolker et al. 2009; Harrison et al. 2018).

Mixed effects models and the introduction of random effects have a number of key (non-mutually exclusive) benefits (adapted from Harrison et al. 2018):

1.  **Complex datasets with built in non-independence:** Biological datasets are often highly structured, containing clusters of **non-independent observational units** that are hierarchical in nature, and mixed models allow us to explicitly model the non-independence in such data.
2.  **Improved inference:** Explicit modelling of the random effects structure will improve inference about fixed effects, depending on which level of the system's hierarchy is being manipulated.
3.  **Grouping variables:** Random effects typically represent some **grouping variable** and allow the estimation of variance in the response variable within and among these groups, which reduces the probability of false positives (Type I error rates) and false negatives (Type II error rates).

## Mixed model resources:

For more details, code, and more information on using mixed effects models see the following online resources:

1.  [Our coding club - Elise Gallois](https://ourcodingclub.github.io/tutorials/mixed-models/)
2.  [Is it fixed or random?](https://dynamicecology.wordpress.com/2015/11/04/is-it-a-fixed-or-random-effect/)
3.  [Why are our models so complex?](https://dynamicecology.wordpress.com/2014/12/02/why-are-your-statistical-models-more-complex-these-days/)

And the following published articles and books:

1.  [Harrison et al. 2018 A brief introduction to mixed effects modelling and multi-model inference in ecology](%3Chttps://peerj.com/articles/4794/)
2.  [Bolker et al. 2009 Generalized linear mixed models: a practical guide for ecology and evolution](https://www.sciencedirect.com/science/article/pii/S0169534709000196?via%3Dihub)
3.  [Zuur et al. 2009 Mixed Effects Models and Extensions in Ecology with R](https://link.springer.com/book/10.1007/978-0-387-87458-6)

## load key libraries

```{r , message = FALSE, results = 'asis', warning = FALSE}
library(lme4)
library(nlme)
library(ggplot2)
library(tidyverse)
```

## When should we use mixed models:

Mixed models are most appropriate when:

1.  Data have inherent **non-independence** through nested variables
2.  One or more variable are **grouped** and (as the user) we want to account for variance within and among groups, but not we are not interested in the statistical effect of that grouped variable on our response variable.

## Example data

We will use the [dragon](http://gkhajduk.d.pr/9GPn/3nbbPoK6) data, which includes data on body length and test score for dragons from 8 mountain ranges. Within each mountain range there are three sites (a, b, and c).

We will follow prior examples using these data from [Elise Gallois](https://ourcodingclub.github.io/tutorials/mixed-models/).

## Explore the data

```{r, message = FALSE, warning = FALSE}

## load dragon data 
load("dragons.RData")

## convert to tibble and check out the columns
dragons <- as_tibble(dragons)

## remove X column and 
dragons <-   
    dragons %>% 
    select(-X) 

## view head of dataset 
head(dragons)

## plot differences in mean test scores across mountain ranges and sites 
dragons %>% 
  select(mountainRange, site, testScore) %>% 
  filter(!is.na(testScore)) %>% 
  group_by(mountainRange, site) %>% 
  summarise(average_test = mean(testScore)) %>% 
  ggplot(aes(x = mountainRange, 
             y = average_test, 
             fill = mountainRange)) +
  geom_col() +
  scale_fill_viridis_d() +
  theme(axis.text.x = element_text(hjust = 1, angle = 45)) +
  facet_wrap(~ site)

## plot relationship between test score and body length by mountain range
dragons %>% 
  ggplot(aes(x = bodyLength, 
             y = testScore, 
             color = mountainRange)) + 
  geom_point() 
 
## check relationships between all pairwise combinations of variables
dragons %>% GGally::ggpairs()

```

## Considering our exploratory analysis

It looks like test score varies between mountain ranges and it also looks like the relationship between test score and body length varies between mountain ranges. If we are interested in the biological effect of mountain range on test score (maybe mountain range is a proxy for food availability), we would consider using linear models. If we aren't really interested in the biological effect of mountain range on the test score or on the relationship between test score and body length, we would consider using linear mixed models.

## Model test score against body length and mountain range using linear model

```{r}

model1 <- lm(testScore ~ bodyLength + mountainRange, data = dragons)
summary(model1)

```

## Interpretation of linear model

Our interpretation of this model is that body length does not affect test score, though there are differences in test score across mountain ranges. If we are not interested in testing for differences between mountan rages, we can used mixed models to assess whether body length affects test scores by controlling for the variation between mountain ranges.

## Upgrade to mixed model

### Key difference between fixed and random effects

**Fixed effects** are variables that we expect will have a biological effect on our response variable. These can be continuous or categorical. In our case, we are interested in the effect of body length on test score.

**Random effects** are grouped factors for which we are trying to control (i.e. those we don't want to test for biological or statistical effects). Random effects MUST be categorical and you can't force them to be continuous. A general rule of thumb about random effects is that there must be at least 5 levels within the variable (e.g. there are 8 mountain ranges). Fewer than 5 levels and this variable should either be excluded or considered a fixed effect. Estimating variance on \<5 data points is very imprecise and although it is technically possible (R will give an output), we have limited confidence in these estimates.

### Fitting a mixed model

We know that our response variable (test score) has unexplained residual variation associated with the mountain range variable. By incorporating mountain range as a random effect, we are modeling the unexplained variation through variance partitioning.

Here we use the syntax `(1|mountainRage)` to incorporate mountain range as a random effect

```{r}

model2 <- lmer(testScore ~ bodyLength + (1|mountainRange), data = dragons)
summary(model2)

```

### Where's my p-value??

You might wonde why the `lmer` function from the `lme4` R package does not provide p-values. Douglas Bates (the author of `lme4`) provides a [summary] here<https://stat.ethz.ch/pipermail/r-help/2006-May/094765.html> of why the function does not output p-values. TL;DR -- Bates says the 

Nevertheless, there are ways to pull p-values for your fixed effects. Here are two options:

```{r}

## Extract full model summary (including p-values for each fixed effect):
jtools::summ(model2)

## another option is to use the nlme R package (function is lme) -- this is the package used by Zuur et al in their books
model3 <- lme(testScore ~ bodyLength, random = ~1|mountainRange, data = dragons)
summary(model3)

```
## Interpretation of mixed model

Once mountain range is included as a random effect, we can see that body length doesn't actually explain variation in test scores. If we take a look at the fixed effect estimate for body length from the linear ( 0.01267 se +/- 0.07974) and mixed effects models (0.03316 se +/- 0.07865), they are very similar and both have standard errors that overlap zero. 

What is explaining variance in test score? The answer lies in variance partitioning of random effects. 

In the `Random Effects` section of the summary for model 2. Note, mountain range = 339.7 and residual = 223.8. To partition the variance in test score accounted for by mountain range we can calculate: 

```{r}

339.7/(339.7 + 223.8)

```

We can interpret this outcome as the differences between mountain ranges accounts for ~60% of the variance in test score (after we account for fixed effects). The other ~40% of the variance is attributable to residual (or unknown) sources of error.

## Incorporating additional random effects

Depending on the structure of our data, we can incorporate additional random effects, which can be considered as nested random effect or crossed random effects.

### Nested random effects

Nested random effects are (in my opinion) easier to interpret. Nested = hierarchical and these are considered a set of variables that can be **within** each other. I often like to think of nested random effects as sampling through (restricted) space.

For example: observing n = 15 individual organisms in each of n = 10 different populations (N = 150 data points). If individuals are assigned to a population because they are either spatially or temporally restricted from being in another population, we would **nest** individual identity within population. We can therefore account for both individual and population using nested random effects. The syntax will look like this: 

```{r}

## generate fake dataset for nested random effects
df <- tibble(A = runif(150), 
                B = runif(150),
                ID = rep(c("A", "B", "C", "D", "E", 
                           "F", "G", "H", "I", "J",
                           "H", "I", "K", "L", "M"), 
                         times = 10),
                population = rep(c("1", "2", "3", "4", "5", 
                                   "6", "7", "8", "9", "10"), 
                                 each = 15))

head(df)

## mixed model syntax
mod1 <- lmer(A ~ B + (1 | population/ID), data = df)

```

### Crossed random effects

Crossed random effects are are more challenging to assign and interpret (in my opinion). I like to think of crossed random effects as sampling through time. Crossed effects can be assigned when subjets of one variable (e.g. individual ID) have experienced some, or all, of the levels in the other variable (e.g. season). Crossed effects can be **full** (if all IDs are observed in all seasons) or **partial** (if some IDs are observed in some seasons).

For example: If we observe n = 15 individual organisms in each of n = 12 different (sub)seasons (N = 180 data points). Individuals are assigned to a season because they were observed in a season. We can therefore account for both individual and season using crossed random effects. The syntax will look like this: 

```{r}

## generate fake dataset for crossed random effects
df <- tibble(A = runif(180), 
                B = runif(180),
                ID = rep(c("A", "B", "C", "D", "E", 
                           "F", "G", "H", "I", "J",
                           "H", "I", "K", "L", "M"), 
                         times = 12),
                season = rep(c("early winter", "mid winter", "late winter", 
                               "early spring", "mid spring", "late spring",
                               "early summer", "mid summer", "late summer", 
                               "early fall", "mid fall", "late fall"), 
                                 each = 15))

head(df)

## mixed model syntax
mod1 <- lmer(A ~ B + (1 | season) + (1 | ID), data = df)

```

## Does the dragon data need crossed or nested random effects? 
Test scores were collected at 3 sites within each of the 8 mountain ranges. Given the rule of thumb where spatial = nested and temporal = crossed, my suggestion would be to apply a nested random effect structure where site is nested within mountain range. 

```{r, message = FALSE, warning = FALSE}

## mixed model with mountain range and site as nested random effects
model4 <- lmer(testScore ~ bodyLength + (1|mountainRange/site), data = dragons)
summary(model4)

#Now let's take a look at the relationship between test score and body length at each mountain range by site combination: 

ggplot(dragons, 
       aes(x = bodyLength, 
           y = testScore, 
           colour = site)) +
      facet_wrap(~mountainRange, nrow = 2) +   
      geom_point(alpha = 0.5) +
      theme_classic() +
      geom_line(data = 
                  cbind(dragons, 
                        pred = predict(model3)), 
                aes(y = pred), size = 1) +  
      theme(legend.position = "none",
            panel.spacing = unit(2, "lines"))  

```

## Random slopes

Very possible! Let's talk about this next time...

## Generalized linear mixed models

Can accommodate non-normal distributions (e.g. Poisson or binomial)

## Model selection 

It's possible, but there are some tricks for choosing random effects.
